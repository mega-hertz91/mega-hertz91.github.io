{"_path":"/osnovy/functions","_dir":"osnovy","_draft":false,"_partial":false,"_locale":"","title":"Функции","description":"","body":{"type":"root","children":[{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[]}]},{"type":"element","tag":"h2","props":{"id":"сигнатура-функции"},"children":[{"type":"text","value":"Сигнатура функции"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Сигнатура определяет входные параметры и их типы, а также выходной параметр и его тип."}]},{"type":"element","tag":"pre","props":{"code":"Math.pow(base, exponent)\n\nПараметры\n    base\n        Основание степени.\n    exponent\n        Показатель степени, в которую возводится основание base.\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"Math.pow(base, exponent)\n\nПараметры\n    base\n        Основание степени.\n    exponent\n        Показатель степени, в которую возводится основание base.\n"}]}]},{"type":"element","tag":"h2","props":{"id":"обязательные-параметры"},"children":[{"type":"text","value":"Обязательные параметры"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Если функция в JavaScript принимает необязательные параметры, то они всегда стоят после обязательных. Их количество может быть любым (это зависит от самой функции), но они всегда идут рядом и в конце списка аргументов."}]},{"type":"element","tag":"h2","props":{"id":"детерминированность"},"children":[{"type":"text","value":"Детерминированность"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Функция называется детерминированной тогда, когда для одних и тех же входных параметров она возвращает один и тот же результат."}]},{"type":"element","tag":"pre","props":{"code":"import { length } from './hexlet-basics/string.js';\n\nlength('hexlet'); // 6\nlength('hexlet'); // 6\n\nlength('wow'); // 3\nlength('wow'); // 3\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { length } from './hexlet-basics/string.js';\n\nlength('hexlet'); // 6\nlength('hexlet'); // 6\n\nlength('wow'); // 3\nlength('wow'); // 3\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"В свою очередь функция, возвращающая случайное число, не является детерминированной, так как у одного и того же входа (даже если он пустой, то есть параметры не принимаются) мы получим всегда разный результат. Насколько он разный – не важно, даже если хотя бы один из миллиона вызовов вернет что-то другое, эта функция автоматически считается недетерминированной."}]},{"type":"element","tag":"pre","props":{"code":"// Функция, возвращающая случайное число\nMath.random(); // 0.0985661311319767\nMath.random(); // 0.8839904367241888\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// Функция, возвращающая случайное число\nMath.random(); // 0.0985661311319767\nMath.random(); // 0.8839904367241888\n"}]}]},{"type":"element","tag":"h2","props":{"id":"побочные-эффекты"},"children":[{"type":"text","value":"Побочные эффекты"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Вывод на экран и возврат значения из функции — разные и независимые операции. Технически вывод на экран равносилен записи в файл (немного особый, но все-таки файл). Для понимания этой темы необходимо немного разобраться в устройстве операционных систем, что крайне важно для программистов."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"С точки зрения программы вывод на экран — это так называемый побочный эффект. Побочным эффектом называют действия, которые изменяют внешнее окружение (среду выполнения). К таким действиям относятся любые сетевые взаимодействия, взаимодействие с файловой системой (чтение и запись файлов), вывод информации на экран или печать на принтере и так далее."}]},{"type":"element","tag":"h2","props":{"id":"свойства-и-методы"},"children":[{"type":"text","value":"Свойства и методы"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Данные, которыми мы оперируем в своих программах, могут обладать важными свойствами — например, у строк есть длина."}]},{"type":"element","tag":"pre","props":{"code":"import { length } from './hexlet-basics/string.js';\n\nconst name = 'Robb';\nconsole.log(length(name)); // => 4\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { length } from './hexlet-basics/string.js';\n\nconst name = 'Robb';\nconsole.log(length(name)); // => 4\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Свойства связаны с данными, у которых они берутся. Для стандартных типов все свойства описаны в документации, как например, у строк. При этом у чисел вообще нет свойств."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"В JavaScript у данных есть не только свойства, но и методы. Методы - это функции, которые находятся внутри свойств. Это означает, что метод можно вызвать как функцию, но при этом он работает как свойство и вызывается через точку."}]},{"type":"element","tag":"pre","props":{"code":"const name = 'Robb';\nconst upperName = name.toUpperCase();\nconsole.log(upperName); // => ROBB\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const name = 'Robb';\nconst upperName = name.toUpperCase();\nconsole.log(upperName); // => ROBB\n"}]}]},{"type":"element","tag":"h2","props":{"id":"неизменяемость"},"children":[{"type":"text","value":"Неизменяемость"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Что напечатает на экран последний вызов?"}]},{"type":"element","tag":"pre","props":{"code":"const name = 'Tirion';\nconsole.log(name.toUpperCase()); // => TIRION\nconsole.log(name); // => ?\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const name = 'Tirion';\nconsole.log(name.toUpperCase()); // => TIRION\nconsole.log(name); // => ?\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Ответ на этот вопрос зависит от того, как вы поняли урок про неизменяемость примитивных типов данных. Вызов метода .toUpperCase() возвращает новое значение, в котором все буквы преобразованы в верхний регистр, но он не меняет (и не может этого сделать) исходную строку. Поэтому внутри константы (или переменной — это не важно) окажется старое значение: 'Tirion'. Эта логика справедлива для методов всех примитивных типов."}]},{"type":"element","tag":"h2","props":{"id":"предикаты"},"children":[{"type":"text","value":"Предикаты"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Функции, подобные isInfant(), называют предикатами. Функции-предикаты (или функции-вопросы) отвечают на какой-то вопрос и всегда (без исключений!) возвращают либо true, либо false."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Предикаты во всех языках принято именовать особым образом для простоты анализа. В JavaScript предикаты, как правило, начинаются с префикса is, has или can, но не ограничены этими словами. Примеры:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"badge","props":{},"children":[{"type":"text","value":"isInfant()"}]},{"type":"text","value":" — «младенец ли?»"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"badge","props":{},"children":[{"type":"text","value":"hasChildren()"}]},{"type":"text","value":" — «есть ли дети?»"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"badge","props":{},"children":[{"type":"text","value":"isEmpty()"}]},{"type":"text","value":" — «пустой ли?»"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"badge","props":{},"children":[{"type":"text","value":"hasErrors()"}]},{"type":"text","value":" — «есть ли ошибки?»"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Функция может считаться предикатом только если она возвращает boolean."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"сигнатура-функции","depth":2,"text":"Сигнатура функции"},{"id":"обязательные-параметры","depth":2,"text":"Обязательные параметры"},{"id":"детерминированность","depth":2,"text":"Детерминированность"},{"id":"побочные-эффекты","depth":2,"text":"Побочные эффекты"},{"id":"свойства-и-методы","depth":2,"text":"Свойства и методы"},{"id":"неизменяемость","depth":2,"text":"Неизменяемость"},{"id":"предикаты","depth":2,"text":"Предикаты"}]}},"_type":"markdown","_id":"content:3.Основы:2.functions.md","_source":"content","_file":"3.Основы/2.functions.md","_extension":"md"}