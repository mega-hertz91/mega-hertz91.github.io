[{"data":1,"prerenderedAt":142},["Reactive",2],{"search-api":3},[4,13,23,31,39,47,70,80,89,98,111,123,129,136],{"id":5,"path":6,"dir":7,"title":8,"description":7,"keywords":9,"body":12},"content:0.index.md","/","","Home",[10,11],"Основные правила","Путь проекта","  Ключевые навыки Senior JS developer  Основные правила    Повторение 5-7 дней в неделю  Использование полученных навыков в текущих проектах  Развитие общих навыков в команде  Рефакторинг екущих проектов и предложение более луших решений   Путь проекта  Старт проекта 12.02.2024  Подача резюме 31.06.2024   v1.0.0",{"id":14,"path":15,"dir":16,"title":17,"description":18,"keywords":19,"body":22},"content:1.introduction:1.getting-started.md","/introduction/getting-started","introduction","Getting Started","From your Markdown files to a deployed website in few minutes.",[20,21],"Play online","Create a new project","  Getting Started  From your Markdown files to a deployed website in few minutes.  Play online  You can start playing with Docus in your browser using Stackblitz:  Play on StackBlitz  Create a new project   Start a fresh Docus project with:     npx   nuxi@latest init docs -t themes/docus\n   Install the dependencies in the   docs  folder:      npm   install\n     yarn   install\n     pnpm   install --shamefully-hoist\n   Run the   dev  command to start Docus in development mode:      npm   run dev\n     yarn   dev\n     pnpm   run dev\n   ✨ Well done! A browser window should automatically open for   http://localhost:3000  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":24,"path":25,"dir":16,"title":26,"description":27,"keywords":28,"body":30},"content:1.introduction:2.project-structure.md","/introduction/project-structure","Project Structure","Docus is a Nuxt theme that provides a ready-to-use documentation website, if you are familiar with Nuxt, you will feel right at home.",[29],"Directory Structure","  Project Structure  Docus is a Nuxt theme that provides a ready-to-use documentation website, if you are familiar with Nuxt, you will feel right at home.  Directory Structure  This is the minimal directory structure to get an up and running Docus website.     content/\n     index.md\n   app.config.ts\n   nuxt.config.ts\n  The   content/  directory is where you   write Markdown pages .  The   app.config.ts  is where you   configure Docus  to fit your branding and design.  The   nuxt.config.ts  is your   Nuxt configuration .  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":32,"path":33,"dir":16,"title":34,"description":35,"keywords":36,"body":38},"content:1.introduction:3.writing-pages.md","/introduction/writing-pages","Writing Pages","Docus is made to let you write all your content in Markdown and Vue components with the MDC syntax.",[37],"Frontmatter","  Writing Pages  Docus is made to let you write all your content in Markdown and Vue components with the MDC syntax.  Each Markdown pages in the   content/  folder will be mapped to a route. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n     File  Generated route     index.md   /    about.md   /about    blog/index.md   /blog    blog/hello.md   /blog/hello    1.guide/2.installation   /guide/installation  Frontmatter  Docus supports multiple Front-matter attributes for pages.     ---\n   title  :   \"Get Started\"\n   description  :   \"Let's learn how to use my amazing module.\"\n   ---\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      Key   Type   Default   Description     layout   string   default  Use any layout name like you would in   definePageMeta()    title   string   Defines the page title and H1 in docs pages    description   string   Defines the page description and excerpt in docs pages    redirect   string   A route path to redirect    image   object   OpenGraph cover image    Docs layout options       aside   boolean   Toggles the visibility of aside navigation    toc   boolean   Toggles the visibility of table of contents    header   boolean   Toggles the visibility of the page header    bottom   boolean   Toggles the visibility of page bottom section    Navigation options       navigation   boolean   Toggles the visibility of the page or directory in navigation    navigation.title   string   Changes the name of the page or directory in navigation    navigation.icon   string   Changes the icon of the page or directory in navigation  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":40,"path":41,"dir":16,"title":42,"description":43,"keywords":44,"body":46},"content:1.introduction:4.configuration.md","/introduction/configuration","Configuration","Learn how to configure Docus.",[45],"Customizing the logo","  Configuration  Learn how to configure Docus.      export   default   defineAppConfig  ({\n     docus: {\n       title:   'Docus'  ,\n       description:   'My Docus Project'  ,\n       url:   'http://docus.dev'\n     }\n   })\n     export   default   defineAppConfig  ({\n     docus: {\n       title:   'Docus'  ,\n       description:   'My Docus Project'  ,\n       url:   'http://docus.dev'  ,\n       image:   '/social-card-preview.png'  ,\n       socials: {\n         twitter:   '@nuxt_js'  ,\n         github:   'nuxt-themes/docus'  ,\n       },\n       github: {\n         root:   'content'  ,\n         edit:   true  ,\n         contributors:   false\n       },\n       layout:   'default'  ,\n       aside: {\n         level:   1  ,\n         filter: [],\n       },\n       header: {\n         title:   false  ,\n         logo:   true  ,\n         showLinkIcon:   false\n       },\n       footer: {\n         credits: {\n           icon:   'IconDocus'  ,\n           text:   'Powered by Docus'  ,\n           href:   'https://docus.dev'  ,\n         },\n         textLinks: [\n           {\n             text:   'Nuxt'  ,\n             href:   'https://nuxt.com'  ,\n             target:   '_blank'  ,\n             rel:   'noopener'\n           }\n         ],\n         iconLinks: [\n           {\n             label:   'NuxtJS'  ,\n             href:   'https://nuxtjs.org'  ,\n             component:   'IconNuxtLabs'  ,\n           },\n           {\n             label:   'Vue Telescope'  ,\n             href:   'https://vuetelescope.com'  ,\n             component:   'IconVueTelescope'  ,\n           },\n         ],\n       }\n     }\n   })\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      Key   Type   Default   Description     title   string  Docus  Website title    titleTemplate   string  Docus  Website title template    description   string  My Docus Project  Website description    url   string   Website URL    layout   string  default  Fallback layout to use (supports   default  or   page )    Socials       socials   object   {}  Social links    socials.github   string   The repository to use on GitHub links    socials.twitter   string   The account to use on Twitter links    socials.youtube   string   The channel to use on Youtube links    socials.instagram   string   The account to use on Instagram links    socials.facebook   string   The account to use on Facebook links    socials.medium   string   The account to use on Medium links    socials.[social]   object   Override social or display custom one    socials.[social].label   string   A label to use for the social    socials.[social].icon   string   A icon to use for the social    socials.[social].href   string   A link to use for the social    socials.[social].rel   string   noopener noreferrer  A space-separated list of   link types    Header       header   object   Header configuration    header.logo   boolean   Whether or not to use   Logo.vue  as the header logo    header.title   string   If set to a string, will be used in the header    header.showLinkIcon   boolean   If set to   true  links icons will show in the header    header.exclude   string[]   An array of path to exclude out from the header navigation    header.fluid   boolean   true  Make header   Container  fluid    Main       main   object   Main configuration    main.fluid   boolean   true  Make main content   Container  fluid    main.padded   boolean   true  Make main content   Container  padded    Aside       aside   object   Aside configuration    aside.level   string  0  Aside base level of nesting    aside.collapsed   boolean   Will be used as default value for collapsible navigation categories    aside.exclude   string[]   An array of path to exclude out from the aside navigation    Footer       footer   object   Footer configuration    footer.credits   object   An object defining the bottom left credits    footer.credits.icon   object   The icon to use for the credits    footer.credits.text   object   The text to use for the credits    footer.textLinks   array   []  An array of texts to display at the center of footer    footer.textLinks[0].text   string   The text to display    footer.textLinks[0].href   string   A link to use for the text    footer.textLinks[0].target   string   _self  Where to display the linked URL, as the name for a browsing context    footer.textLinks[0].rel   string   noopener noreferrer  A space-separated list of   link types    footer.iconLinks   array   []  An array of icons to display in the footer    footer.iconLinks[0].label   string   A label to use for the icon    footer.iconLinks[0].href   string   A link to use for the icon    footer.iconLinks[0].icon   string   The icon to use (can be a component name)    footer.iconLinks[0].rel   string   noopener noreferrer  A space-separated list of   link types    footer.fluid   boolean   true  Make footer   Container  fluid    GitHub       github   object   false  GitHub integration configuration    github.dir   string   Directory containing the files to be edited    github.branch   string   Branch to start editing    github.repo   string   Name of the GitHub repo to edit files    github.owner   string   Owner of the repo    github.edit   boolean   Toggle \"Edit this page on Github\" component on documentation pages    Search       fuse   object   useFuse   options  Customizing the logo  To update the logo in the header, create a component in   components/Logo.vue  with your own logo.  In this example, the image is located at   /public/img .     \u003C  template  >\n     \u003C  img   width  =  \"120\"   src  =  \"/img/YOURLOGO.png\"  />\n   \u003C/  template  >\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":48,"path":49,"dir":50,"title":51,"description":52,"keywords":53,"body":69},"content:2.api:1.components.md","/api/components","api","Components","Discover every component you can use in your content.",[54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"\u003CAlert />","\u003CBadge />","\u003CBlockHero />","\u003CButtonLink />","\u003CCallout />","\u003CCard />","\u003CCardGrid />","\u003CCodeGroup />","\u003CCodeBlock />","\u003CCopyButton />","\u003CIcon />","\u003CList />","\u003CSandbox />","\u003CTerminal />","\u003CVideoPlayer />","  Components  Discover every component you can use in your content.   \u003CAlert />     Check out an   info  alert with   code  and a   link .   Check out a   success  alert with   code  and a   link .   Check out a   warning  alert with   code  and a   link .   Check out a   danger  alert with   code  and a   link .     ::alert{type=\"info\"}\n   Check out an   **info**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n   \n   ::alert{type=\"success\"}\n   Check out a   **success**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n   \n   ::alert{type=\"warning\"}\n   Check out a   **warning**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n   \n   ::alert{type=\"danger\"}\n   Check out a   **danger**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n     \u003CBadge />   \u003CBadge />  support same types as   \u003CAlert /> .     v1.2  Deprecated   Not found!     :badge[  v1.2  ]\n   \n   :badge[  Deprecated  ]{type=\"warning\"}\n   \n   ::badge{type=\"danger\"}\n   Not found!\n   ::\n     \u003CBlockHero />      Document-driven framework   Docus reconciles content creators and developers by offering to both the best tools to create and scale content-based websites.     ::block-hero\n   ---\n   cta:\n     -   Get started\n     -   /get-started\n   secondary:\n     -   Open on GitHub →\n     -   https://github.com/nuxtlabs/docus\n   snippet: npx nuxi@latest init docus-app -t nuxtlabs/docus-starter\n   ---\n   #title\n   Document-driven framework\n   \n   #description\n   Docus reconciles content creators and developers by offering to both the best tools to create and scale content-based websites.\n   ::\n     \u003CButtonLink />    Play on StackBlitz     :button-link[Play on StackBlitz]{icon=\"IconStackBlitz\" href=\"https://stackblitz.com/github/nuxtlabs/docus-starter\" blank}\n     \u003CCallout />   \u003CCallout />  support same types as   \u003CAlert /> .      This is a callout! Click me to open.   This is the content of the callout.    This is a callout! Click me to open.   This is the content of the callout.     ::callout\n   #summary\n   This is a callout! Click me to open.\n   \n   #content\n   This is the content of the callout.\n   ::\n    \n   ::callout{type=\"warning\"}\n   #summary\n   This is a callout! Click me to open.\n   \n   #content\n   This is the content of the callout.\n   ::\n     \u003CCard />      Nuxt Architecture.   Based on   Nuxt 3  and   Nuxt Content .   \nUse Nuxt to build a static site, or a serverless app.      ::card{icon=\"logos:nuxt-icon\"}\n    #title\n    Nuxt Architecture.\n    #description\n    Based on   **Nuxt 3**   and   **Nuxt Content**  . :br\n    Use Nuxt to build a static site, or a serverless app.\n    ::\n     \u003CCardGrid />      What's included?      Nuxt Architecture.   Harness the full power of Nuxt and the Nuxt ecosystem.    Vue Components.   Use built-in components (or your own!) inside your content.    Write Markdown.   Enjoy the ease and simplicity of Markdown and discover MDC syntax.     ::card-grid\n   #title\n   What's included\n   \n   #root\n   :ellipsis\n   \n   #default\n     ::card\n     #title\n     Nuxt Architecture.\n     #description\n     Harness the full power of Nuxt and the Nuxt ecosystem.\n     ::\n     ::card\n     #title\n     Vue Components.\n     #description\n     Use built-in components (or your own!) inside your content.\n     ::\n     ::card\n     #title\n     Write Markdown.\n     #description\n     Enjoy the ease and simplicity of Markdown and discover MDC syntax.\n     ::\n   ::\n     \u003CCodeGroup />  This component uses   slots  to create a tab panel of your code examples or preview.        yarn   add docus\n     npm   install docus\n     ::code-group\n     ```bash [Yarn]\n     yarn   add docus\n     ```\n     ```bash [NPM]\n     npm   install docus\n     ```\n   ::\n     \u003CCodeBlock />  To be used inside a   \u003CCodeGroup />  component to display a preview of some rendered code.     Hello World!     /* Added as a child of   `\u003CCodeGroup />`   */\n   \n   ::code-block{label=\"Preview\" preview}\n     ::badge\n     Hello World!\n     ::\n   ::\n     \u003CCopyButton />        :copy-button{content=\"hey!\"}\n     \u003CIcon />  Icon component gives you access to all   100,000+  icons from   icones.js.org .          :icon{name=\"logos:nuxt-icon\"}\n   :icon{name=\"logos:vue\"}\n   :icon{name=\"logos:nuxt-icon\"}\n     \u003CList />       Important  Always    Amazing  Congrats    Do you know?  You can also do this    Be careful  Use with precautions    Drinking too much  Driving drunk     ::list{type=\"primary\"}\n   -   **Important**\n   -   Always\n   ::\n   \n   ::list{type=\"success\"}\n   -   Amazing\n   -   Congrats\n   ::\n   \n   ::list{type=\"info\"}\n   -   Do you know?\n   -   You can also do this\n   ::\n   \n   ::list{type=\"warning\"}\n   -   Be careful\n   -   Use with precautions\n   ::\n   \n   ::list{type=\"danger\"}\n   -   Drinking too much\n   -   Driving drunk\n   ::\n    \u003CSandbox />  Embed CodeSandbox/StackBlitz easily in your documentation with great performances.  Using the   IntersectionObserver  to load when visible in the viewport.        :sandbox{src=\"https://codesandbox.io/embed/nuxt-content-l164h?hidenavigation=1&theme=dark\"}\n     \u003CTerminal />        :terminal{content=\"nuxi build\"}\n     \u003CVideoPlayer />         ::div\n     :video-player{src=\"https://www.youtube.com/watch?v=o9e12WbKrd8\"}\n   ::\n   html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":71,"path":72,"dir":50,"title":73,"description":74,"keywords":75,"body":79},"content:2.api:2.composables.md","/api/composables","Composables","Discover the Docus composables to use in your custom Vue components and pages.",[76,77,78],"useDocus()","useMenu()","useScrollspy()","  Composables  Discover the Docus composables to use in your custom Vue components and pages.   useDocus()    useDocus  ()  gives access to docus runtime config, all default values and your custom config from   app.config.ts    config  refers to the merged config of the current page.   main ,   header ,   aside ,   footer  and   titleTemplate  can be set from   _dir.yml  and any   page.md  file.  The configs in   app.config  file will be used as defaults.     \u003C  script   setup  >\n   const   {   config   }   =   useDocus  ()\n   \u003C/  script  >\n   \n   \u003C  template  >\n     \u003C  div  >\n       \u003C  h1  >{{ config.title }}\u003C/  h1  >\n       \u003C  p  >{{ config.description }}\u003C/  p  >\n     \u003C/  div  >\n   \u003C/  template  >\n    tree  refers to the current navigation tree that is displayed in the   aside  component.     \u003C  script   setup  >\n   const   {   tree   }   =   useDocus  ()\n   \u003C/  script  >\n   \n   \u003C  template  >\n     \u003C  DocsAsideTree   :  links  =  \"  tree  \"   />\n   \u003C/  template  >\n    useMenu()   useMenu()  gives access to   $menu  plugin controlling mobile navigation globally.     const   {\n     // Is menu visible\n     visible  ,\n     // Close menu function\n     close  ,\n     // Open menu function\n     open  ,\n     // Toggle menu function\n     toggle\n   }   =   useMenu  ()\n    useScrollspy()   useScrollspy()  is used in   docs  layout to make the ToC display the currently visible headings.     const   {\n     // Headings on the page\n     visibleHeadings  ,\n     // Active headings (for the current page)\n     activeHeadings  ,\n     // Update headings (an array of DOM nodes)\n     updateHeadings\n   }   =   useScrollspy  ()\n   html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":81,"path":82,"dir":50,"title":83,"description":84,"keywords":85,"body":88},"content:2.api:3.layouts.md","/api/layouts","Layouts","Docus provides multiple built-in layouts for displaying your Markdown pages.",[86,87],"default","page","  Layouts  Docus provides multiple built-in layouts for displaying your Markdown pages.   default  The default layout for every page created in the project. This layout renders multiple section alongside the content:   Aside navigation menu (togglable with   aside: false/true )  Page bottom section (togglable with   bottom: false/true )  Table of content (togglable with   toc: false/true )     ---\n   aside  :   true\n   bottom  :   true\n   toc  :   false\n   ---\n   \n   Your awesome content\n  Current page is live sample of default layout.   page   page  layout is content focused layout. This layout does not render aside menu of table of contents.  This layout accept some configuration from content front-matter.    fluid : By setting   fluid: true  in content front-matter the content will be rendered in full width.   constrainedClass : Using this option you can modify layout container look. Like constraining layout width of changing the background.   padded : Setting   padded: true  in front-matter will add horizontal padding in the layout.     ---\n   title  :   Home\n   layout  :   page\n   fluid  :   true\n   ---\n  Check   Home page  as live sample of page layout  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":90,"path":91,"dir":92,"title":93,"description":7,"keywords":94,"body":97},"content:3.Основы:1.type-data.md","/osnovy/type-data","osnovy","Типы данных",[95,96],"Типы данных в JS","Явное приведение типов","    Типы данных в JS    undefined (переменная не определена)  Integer (Целое число)  Float (Число с плавающей запятой)  String (Строка)  Boolean (true|false)  Nan (Number of undefined)  Явное приведение типов  В программировании регулярно встречаются задачи, когда один тип данных нужно преобразовать в другой — например, при работе с формами на сайтах. Данные формы всегда приходят в текстовом виде, даже если значение — число. Вот как его можно преобразовать:   parseInt(10)\nparseFloat(2.5)\nparseStr('Hello world')\n",{"id":99,"path":100,"dir":92,"title":101,"description":7,"keywords":102,"body":110},"content:3.Основы:2.functions.md","/osnovy/functions","Функции",[103,104,105,106,107,108,109],"Сигнатура функции","Обязательные параметры","Детерминированность","Побочные эффекты","Свойства и методы","Неизменяемость","Предикаты","    Сигнатура функции  Сигнатура определяет входные параметры и их типы, а также выходной параметр и его тип.   Math.pow(base, exponent)\n\nПараметры\n    base\n        Основание степени.\n    exponent\n        Показатель степени, в которую возводится основание base.\n  Обязательные параметры  Если функция в JavaScript принимает необязательные параметры, то они всегда стоят после обязательных. Их количество может быть любым (это зависит от самой функции), но они всегда идут рядом и в конце списка аргументов.  Детерминированность  Функция называется детерминированной тогда, когда для одних и тех же входных параметров она возвращает один и тот же результат.   import { length } from './hexlet-basics/string.js';\n\nlength('hexlet'); // 6\nlength('hexlet'); // 6\n\nlength('wow'); // 3\nlength('wow'); // 3\n  В свою очередь функция, возвращающая случайное число, не является детерминированной, так как у одного и того же входа (даже если он пустой, то есть параметры не принимаются) мы получим всегда разный результат. Насколько он разный – не важно, даже если хотя бы один из миллиона вызовов вернет что-то другое, эта функция автоматически считается недетерминированной.   // Функция, возвращающая случайное число\nMath.random(); // 0.0985661311319767\nMath.random(); // 0.8839904367241888\n  Побочные эффекты  Вывод на экран и возврат значения из функции — разные и независимые операции. Технически вывод на экран равносилен записи в файл (немного особый, но все-таки файл). Для понимания этой темы необходимо немного разобраться в устройстве операционных систем, что крайне важно для программистов.  С точки зрения программы вывод на экран — это так называемый побочный эффект. Побочным эффектом называют действия, которые изменяют внешнее окружение (среду выполнения). К таким действиям относятся любые сетевые взаимодействия, взаимодействие с файловой системой (чтение и запись файлов), вывод информации на экран или печать на принтере и так далее.  Свойства и методы  Данные, которыми мы оперируем в своих программах, могут обладать важными свойствами — например, у строк есть длина.   import { length } from './hexlet-basics/string.js';\n\nconst name = 'Robb';\nconsole.log(length(name)); // => 4\n  Свойства связаны с данными, у которых они берутся. Для стандартных типов все свойства описаны в документации, как например, у строк. При этом у чисел вообще нет свойств.  В JavaScript у данных есть не только свойства, но и методы. Методы - это функции, которые находятся внутри свойств. Это означает, что метод можно вызвать как функцию, но при этом он работает как свойство и вызывается через точку.   const name = 'Robb';\nconst upperName = name.toUpperCase();\nconsole.log(upperName); // => ROBB\n  Неизменяемость  Что напечатает на экран последний вызов?   const name = 'Tirion';\nconsole.log(name.toUpperCase()); // => TIRION\nconsole.log(name); // => ?\n  Ответ на этот вопрос зависит от того, как вы поняли урок про неизменяемость примитивных типов данных. Вызов метода .toUpperCase() возвращает новое значение, в котором все буквы преобразованы в верхний регистр, но он не меняет (и не может этого сделать) исходную строку. Поэтому внутри константы (или переменной — это не важно) окажется старое значение: 'Tirion'. Эта логика справедлива для методов всех примитивных типов.  Предикаты  Функции, подобные isInfant(), называют предикатами. Функции-предикаты (или функции-вопросы) отвечают на какой-то вопрос и всегда (без исключений!) возвращают либо true, либо false.  Предикаты во всех языках принято именовать особым образом для простоты анализа. В JavaScript предикаты, как правило, начинаются с префикса is, has или can, но не ограничены этими словами. Примеры:    isInfant()  — «младенец ли?»   hasChildren()  — «есть ли дети?»   isEmpty()  — «пустой ли?»   hasErrors()  — «есть ли ошибки?»  Функция может считаться предикатом только если она возвращает boolean.",{"id":112,"path":113,"dir":92,"title":114,"description":7,"keywords":115,"body":122},"content:3.Основы:3.js.md","/osnovy/js","Логика",[114,116,117,118,119,120,121],"Логический тип","Комбинирование логических операций","Логические операторы","Условные конструкции","Тернарный оператор","Результат логических операций","    Логика  Языки программирования адаптировали все математические операции сравнения практически в неизменном виде. Единственное серьезное отличие – операторы равенства и неравенства. В математике для этого используется обычное равно =, но в программировании такое встречается не часто. Во многих языках символ = используется для присваивания значений переменным, поэтому для сравнения взяли == или ===.  Список операций сравнения в JavaScript:    \u003C меньше   \u003C= меньше или равно   > больше   >= больше или равно   === равно   !== не равно  Логический тип  Логическая операция типа 5 > 4 или password === text — это выражение, и его результат — специальное значение true («истина») или false («ложь»). Это новый для нас тип данных — boolean.   const result = 5 > 4;\nconsole.log(result); // => true\nconsole.log('one' !== 'one'); // => false\n  Комбинирование логических операций  Логические операции — это выражения. Значит, логические операции можно комбинировать с другими выражениями.  Например, мы хотим проверить четность числа, то есть кратность двум. В программировании используют такой подход:   проверяют остаток от деления на 2:  если остаток 0, то число было четным  если остаток не 0, то число было нечетным  Остаток от деления — простая, но очень важная концепция в арифметике, алгебре, и даже в теории чисел и криптографии. Идея проста: нужно разделить число на несколько равных групп, и если в конце что-то останется — это и есть остаток от деления.  Делим конфеты поровну между людьми:   7 конфет, 2 человека: 2 x 3 + остаток 1. Значит, 7 не кратно 2.  21 конфету, 3 человека: 3 x 7 + остаток 0. Значит, 21 кратно 3.  19 конфет, 5 человек: 5 x 3 + остаток 4. Значит, 19 не кратно 5.   // функция проверки четности\nconst isEven = (number) => number % 2 === 0;\n\nisEven(10); // true\nisEven(3);  // false\n  В одном выражении мы скомбинировали логический оператор === (проверка равенства) и арифметический оператор %.  Приоритет   арифметических операций выше логических . Значит, сначала вычисляется арифметическое выражение number % 2, затем результат участвует в логическом сравнении.  Словами это можно расшифровать так: «вычислить остаток от деления числа number на 2 и сравнить, равен ли остаток нулю; затем вернуть результат проверки равенства».  Логические операторы  Логические выражения могут объединяться друг с другом, создавая все более хитрые проверки. Хороший пример: проверка пароля. Как вы знаете, некоторые сайты при регистрации хотят пароль от 8 до 20 символов в длину. Честно говоря, это странное ограничение, но что поделать. В математике мы бы написали 8 \u003C x \u003C 20 (где x это длина конкретного пароля), но в JavaScript такой трюк не пройдет. Нам придется сделать два отдельных логических выражения и соединить их специальным оператором «И»:  Вот функция, которая принимает пароль и говорит, соответствует ли он условиям, или не соответствует:   const isStrongPassword = (password) => {\n  const length = password.length;\n  return length > 8 && length \u003C 20;\n};\n\nisStrongPassword('qwerty'); // false\nisStrongPassword('qwerty1234'); // true\nisStrongPassword('zxcvbnmasdfghjkqwertyui'); // false\n  && - означает «И» (в математической логике это называют конъюнкцией). Все выражение считается истинным только в том случае, когда истинен каждый операнд — каждое из составных выражений. Иными словами, && означает «и то, и другое».  Приоритет этого оператора ниже, чем приоритет операторов сравнения, поэтому выражение отрабатывает правильно без скобок.  Кроме &&, часто используется оператор || — «ИЛИ» (дизъюнкция). Он означает «или то, или другое, или оба». Операторы можно комбинировать в любом количестве и любой последовательности, но когда одновременно встречаются && и ||, то приоритет лучше задавать скобками. Ниже пример расширенной функции определения корректности пароля:  И && (Конъюкция) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n     A  B  A && B    TRUE  TRUE  TRUE   TRUE  FALSE  FALSE   FALSE  TRUE  FALSE   FALSE  FALSE  FALSE  Принцип все или ничего   // true && true;\n3 > 2 && 'wow'.startsWith('w'); // true\n\n// true && false;\n'start' === 'start' && 8 \u003C 3; // false\n  ИЛИ || (Дизъюкция) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n     A  B  A && B    TRUE  TRUE  TRUE   TRUE  FALSE  TRUE   FALSE  TRUE  TRUE   FALSE  FALSE  FALSE  Принцип если хотя бы кто-нибудь   // false || true;\n3 \u003C 2 || 'wow'.startsWith('w'); // true\n\n// false || false;\n'start' === 'Start' || 3 \u003C 3; // false\n  Отрицание   const isEven = (number) => number % 2 === 0;\n\nisEven(10);  // true  Четное ли\n!isEven(10); // false  Нечетное ли\n!isEven(11) // true  Нечетное ли\n!!isEven(10) // true // Четное ли + приведение типа к boolean\n  Условные конструкции   if  else  Конструкция else if   const getTypeOfSentence = (sentence) => {\n  const lastChar = sentence[sentence.length - 1];\n  let sentenceType;\n\n  if (lastChar === '?') {\n    sentenceType = 'question';\n  } else if (lastChar === '!') {\n    sentenceType = 'exclamation';\n  } else {\n    sentenceType = 'normal';\n  }\n\n  return `Sentence is ${sentenceType}`;\n};\n\ngetTypeOfSentence('Who?'); // Sentence is question\ngetTypeOfSentence('No');   // Sentence is normal\ngetTypeOfSentence('No!');  // Sentence is exclamation\n  Теперь все условия выстроены в единую конструкцию. else if — это «если не выполнено предыдущее условие, но выполнено текущее». Получается такая схема:  если последний символ это ?, то 'question'\nиначе, если последний символ это !, то 'exclamation'\nиначе 'normal'  Тернарный оператор  Тернарный оператор — единственный в своем роде оператор, требующий три операнда:   const abs = (number) => {\n  return number >= 0 ? number : -number;\n};\n  Результат логических операций  Посмотрите на код ниже и попробуйте угадать, что будет напечатано на экран:   console.log(0 || 1); \nПравильный ответ: 1  Оператор ИЛИ работает так, что его выполнение (слева направо) прерывается и возвращается результат первого аргумента, который можно преобразовать в true. Если первый аргумент невозможно преобразовать в true, то возвращается второй, даже если его нельзя преобразовать в true.  Ниже пример с оператором И:   console.log(0 && 1); // => 0 \nОператор И работает так, что его выполнение (слева направо) прерывается и возвращается результат первого аргумента, который можно преобразовать в false.  В JavaScript есть два простых правила, по которым происходят преобразования:  0, '' (пустая строка), undefined, NaN, null приводятся к false. Эти значения называют falsy.\nВсе остальное приводится к true\nЭтим активно пользуются в разработке, например, для определения значения по умолчанию:   const value = name || '';\n// Примеры\n234 || ''; // 234\n'hexlet' || ''; // hexlet\nundefined || ''; // ''\n",{"id":124,"path":125,"dir":92,"title":126,"description":7,"keywords":127,"body":128},"content:3.Основы:4.agregation-data.md","/osnovy/agregation-data","Агрегация данных",[126],"    Агрегация данных  Отдельный класс задач, который не может обойтись без циклов, называется агрегированием данных. К таким задачам относятся поиск максимального, минимального, суммы, среднего арифметического и т.п. Их главная особенность в том, что результат зависит от всего набора данных. Для расчета суммы нужно сложить все числа, для вычисления максимального нужно сравнить все числа.  С такими задачами хорошо знакомы все, кто занимаются числами, например бухгалтеры или маркетологи. Обычно их выполняют в таблицах наподобие Microsoft Excel или Google Spreadsheets.  Числа  Разберем самый простой пример – поиск суммы набора чисел. Реализуем функцию, которая складывает числа в указанном диапазоне, включая границы. Диапазоном в данном случае называется ряд чисел от какого-то начала до определенного конца. Например, диапазон   1, 10  включает в себя все целые числа от 1 до 10.   sumNumbersFromRange(5, 7); // 5 + 6 + 7 = 18\nsumNumbersFromRange(1, 2); // 1 + 2 = 3\n\n// [1, 1] диапазон с одинаковым началом и концом – тоже диапазон\n// он в себя включает ровно одно число – саму границу диапазона\nsumNumbersFromRange(1, 1); // 1\nsumNumbersFromRange(100, 100); // 100\n  Для реализации этого кода нам понадобится цикл, так как сложение чисел – это итеративный процесс (он повторяется для каждого числа), а количество итераций зависит от размера диапазона.  Строки  Агрегация применяется не только к числам, но и к строкам. Это такие задачи, в которых строка формируется динамически, то есть заранее неизвестно, какого она размера и что будет содержать.  Представьте себе функцию, которая умеет «умножать» строку, то есть она повторяет ее указанное количество раз:   repeat('hexlet', 3); // 'hexlethexlethexlet'   const repeat = (text, times) => {\n  // Нейтральный элемент для строк – пустая строка\n  let result = '';\n  let i = 1;\n\n  while (i \u003C= times) {\n    // Каждый раз добавляем строку к результату\n    result = `${result}${text}`;\n    i = i + 1;\n  }\n\n  return result;\n};\n",{"id":130,"path":131,"dir":92,"title":132,"description":7,"keywords":133,"body":135},"content:3.Основы:5.cycle-and-string.md","/osnovy/cycle-and-string","Обход строк в цикле",[132,134],"Формирование строк в циклах","    Обход строк в цикле  Циклы подходят не только для обработки чисел, но и при работе со строками. В первую очередь благодаря возможности получить конкретный символ по его индексу. Ниже пример кода, который распечатывает каждую букву слова на отдельной строке:   const printNameBySymbol = (name) => {\n  let i = 0;\n  // Такая проверка будет выполняться до конца строки\n  // включая последний символ. Его индекс `length - 1`.\n  while (i \u003C name.length) {\n    // Обращаемся к символу по индексу\n    console.log(name[i]);\n    i = i + 1;\n  }\n};\n\nconst name = 'Arya';\nprintNameBySymbol(name);\n// => A\n// => r\n// => y\n// => a\n  Самое главное в этом коде, поставить правильное условие в while. Это можно сделать сразу двумя способами: i \u003C name.length или i \u003C= name.length - 1. Оба способа приводят к одному результату.  Формирование строк в циклах  Еще одно использование циклов – формирование строк. Подобная задача нередко встречается в веб-программировании. Она сводится к обычной агрегации с применением интерполяции или конкатенации.  Есть одна задача, крайне популярная среди людей, проводящих собеседования, это переворот строки. Ее можно решить множеством разных способов, но именно посимвольный перебор считается самым базовым. Пример работы этой функции:   reverse('Hexlet'); // telxeH   const reverse = (str) => {\n  let i = 0;\n  // Нейтральный элемент для строк это пустая строка\n  let result = '';\n  while (i \u003C str.length) {\n    // Соединяем в обратном порядке\n    result = `${str[i]}${result}`;\n    // То же самое через конкатенацию\n    // result = str[i] + result;\n    i = i + 1;\n  }\n\n  return result;\n};\n\nconst name = 'Bran';\nreverse(name); // narB\n// Проверка нейтрального элемента\nreverse(''); // ''\n",{"id":137,"path":138,"dir":92,"title":139,"description":7,"keywords":140,"body":141},"content:3.Основы:6.increment-decrement.md","/osnovy/increment-decrement","Инкремент и декремент",[139],"    Инкремент и декремент  Из языка Си в JavaScript перекочевали две операции: инкремент ++ и декремент --, которые очень часто встречаются вместе с циклами. Эти унарные операции увеличивают и уменьшают на единицу число, записанное в переменную:   let i = 0;\ni++; // 0\ni++; // 1\n\ni--; // 2\ni--; // 1\n  Кроме постфиксной формы, у них есть и префиксная:   let i = 0;\n++i; // 1\n++i; // 2\n\n--i; // 1\n--i; // 0\n  Кажется, что нет никакой разницы между постфиксной и префиксной формами. Но тут начинаются сложности.  В отличие от всех остальных операций, которые не имеют побочных эффектов и просто возвращают новое значение, инкремент и декремент не только возвращают значение, но и изменяют значение переменной.  При использовании префиксной нотации сначала происходит изменение переменной, а потом возврат. При использовании постфиксной нотации — наоборот: можно считать, что сначала происходит возврат, а потом изменение переменной. Правило работает одинаково для инкремента и декремента. Для простоты рассмотрим только инкремент:   let x = 5;\n\nconsole.log(++x); // => 6\nconsole.log(x);   // => 6\n\nconsole.log(x++); // => 6\nconsole.log(x);   // => 7\n",1707803212606]