{"_path":"/osnovy/cycle-and-string","_dir":"osnovy","_draft":false,"_partial":false,"_locale":"","title":"Обход строк в цикле","description":"","body":{"type":"root","children":[{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[]}]},{"type":"element","tag":"h2","props":{"id":"обход-строк-в-цикле"},"children":[{"type":"text","value":"Обход строк в цикле"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Циклы подходят не только для обработки чисел, но и при работе со строками. В первую очередь благодаря возможности получить конкретный символ по его индексу. Ниже пример кода, который распечатывает каждую букву слова на отдельной строке:"}]},{"type":"element","tag":"pre","props":{"code":"const printNameBySymbol = (name) => {\n  let i = 0;\n  // Такая проверка будет выполняться до конца строки\n  // включая последний символ. Его индекс `length - 1`.\n  while (i < name.length) {\n    // Обращаемся к символу по индексу\n    console.log(name[i]);\n    i = i + 1;\n  }\n};\n\nconst name = 'Arya';\nprintNameBySymbol(name);\n// => A\n// => r\n// => y\n// => a\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const printNameBySymbol = (name) => {\n  let i = 0;\n  // Такая проверка будет выполняться до конца строки\n  // включая последний символ. Его индекс `length - 1`.\n  while (i < name.length) {\n    // Обращаемся к символу по индексу\n    console.log(name[i]);\n    i = i + 1;\n  }\n};\n\nconst name = 'Arya';\nprintNameBySymbol(name);\n// => A\n// => r\n// => y\n// => a\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Самое главное в этом коде, поставить правильное условие в while. Это можно сделать сразу двумя способами: i < name.length или i <= name.length - 1. Оба способа приводят к одному результату."}]},{"type":"element","tag":"h2","props":{"id":"формирование-строк-в-циклах"},"children":[{"type":"text","value":"Формирование строк в циклах"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Еще одно использование циклов – формирование строк. Подобная задача нередко встречается в веб-программировании. Она сводится к обычной агрегации с применением интерполяции или конкатенации."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Есть одна задача, крайне популярная среди людей, проводящих собеседования, это переворот строки. Ее можно решить множеством разных способов, но именно посимвольный перебор считается самым базовым. Пример работы этой функции:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"reverse('Hexlet'); // telxeH"}]}]},{"type":"element","tag":"pre","props":{"code":"const reverse = (str) => {\n  let i = 0;\n  // Нейтральный элемент для строк это пустая строка\n  let result = '';\n  while (i < str.length) {\n    // Соединяем в обратном порядке\n    result = `${str[i]}${result}`;\n    // То же самое через конкатенацию\n    // result = str[i] + result;\n    i = i + 1;\n  }\n\n  return result;\n};\n\nconst name = 'Bran';\nreverse(name); // narB\n// Проверка нейтрального элемента\nreverse(''); // ''\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const reverse = (str) => {\n  let i = 0;\n  // Нейтральный элемент для строк это пустая строка\n  let result = '';\n  while (i < str.length) {\n    // Соединяем в обратном порядке\n    result = `${str[i]}${result}`;\n    // То же самое через конкатенацию\n    // result = str[i] + result;\n    i = i + 1;\n  }\n\n  return result;\n};\n\nconst name = 'Bran';\nreverse(name); // narB\n// Проверка нейтрального элемента\nreverse(''); // ''\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"обход-строк-в-цикле","depth":2,"text":"Обход строк в цикле"},{"id":"формирование-строк-в-циклах","depth":2,"text":"Формирование строк в циклах"}]}},"_type":"markdown","_id":"content:3.Основы:5.cycle-and-string.md","_source":"content","_file":"3.Основы/5.cycle-and-string.md","_extension":"md"}