{"_path":"/osnovy/js","_dir":"osnovy","_draft":false,"_partial":false,"_locale":"","title":"Логика","description":"","body":{"type":"root","children":[{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[]}]},{"type":"element","tag":"h2","props":{"id":"логика"},"children":[{"type":"text","value":"Логика"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Языки программирования адаптировали все математические операции сравнения практически в неизменном виде. Единственное серьезное отличие – операторы равенства и неравенства. В математике для этого используется обычное равно =, но в программировании такое встречается не часто. Во многих языках символ = используется для присваивания значений переменным, поэтому для сравнения взяли == или ===."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Список операций сравнения в JavaScript:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"< меньше"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"<= меньше или равно"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"> больше"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":">= больше или равно"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"=== равно"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"!== не равно"}]}]}]},{"type":"element","tag":"h2","props":{"id":"логический-тип"},"children":[{"type":"text","value":"Логический тип"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Логическая операция типа 5 > 4 или password === text — это выражение, и его результат — специальное значение true («истина») или false («ложь»). Это новый для нас тип данных — boolean."}]},{"type":"element","tag":"pre","props":{"code":"const result = 5 > 4;\nconsole.log(result); // => true\nconsole.log('one' !== 'one'); // => false\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const result = 5 > 4;\nconsole.log(result); // => true\nconsole.log('one' !== 'one'); // => false\n"}]}]},{"type":"element","tag":"h2","props":{"id":"комбинирование-логических-операций"},"children":[{"type":"text","value":"Комбинирование логических операций"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Логические операции — это выражения. Значит, логические операции можно комбинировать с другими выражениями."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Например, мы хотим проверить четность числа, то есть кратность двум. В программировании используют такой подход:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"проверяют остаток от деления на 2:"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"если остаток 0, то число было четным"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"если остаток не 0, то число было нечетным"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Остаток от деления — простая, но очень важная концепция в арифметике, алгебре, и даже в теории чисел и криптографии. Идея проста: нужно разделить число на несколько равных групп, и если в конце что-то останется — это и есть остаток от деления."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Делим конфеты поровну между людьми:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"7 конфет, 2 человека: 2 x 3 + остаток 1. Значит, 7 не кратно 2."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"21 конфету, 3 человека: 3 x 7 + остаток 0. Значит, 21 кратно 3."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"19 конфет, 5 человек: 5 x 3 + остаток 4. Значит, 19 не кратно 5."}]}]},{"type":"element","tag":"pre","props":{"code":"// функция проверки четности\nconst isEven = (number) => number % 2 === 0;\n\nisEven(10); // true\nisEven(3);  // false\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// функция проверки четности\nconst isEven = (number) => number % 2 === 0;\n\nisEven(10); // true\nisEven(3);  // false\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"В одном выражении мы скомбинировали логический оператор === (проверка равенства) и арифметический оператор %."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Приоритет "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"арифметических операций выше логических"}]},{"type":"text","value":". Значит, сначала вычисляется арифметическое выражение number % 2, затем результат участвует в логическом сравнении."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Словами это можно расшифровать так: «вычислить остаток от деления числа number на 2 и сравнить, равен ли остаток нулю; затем вернуть результат проверки равенства»."}]},{"type":"element","tag":"h2","props":{"id":"логические-операторы"},"children":[{"type":"text","value":"Логические операторы"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Логические выражения могут объединяться друг с другом, создавая все более хитрые проверки. Хороший пример: проверка пароля. Как вы знаете, некоторые сайты при регистрации хотят пароль от 8 до 20 символов в длину. Честно говоря, это странное ограничение, но что поделать. В математике мы бы написали 8 < x < 20 (где x это длина конкретного пароля), но в JavaScript такой трюк не пройдет. Нам придется сделать два отдельных логических выражения и соединить их специальным оператором «И»:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Вот функция, которая принимает пароль и говорит, соответствует ли он условиям, или не соответствует:"}]},{"type":"element","tag":"pre","props":{"code":"const isStrongPassword = (password) => {\n  const length = password.length;\n  return length > 8 && length < 20;\n};\n\nisStrongPassword('qwerty'); // false\nisStrongPassword('qwerty1234'); // true\nisStrongPassword('zxcvbnmasdfghjkqwertyui'); // false\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const isStrongPassword = (password) => {\n  const length = password.length;\n  return length > 8 && length < 20;\n};\n\nisStrongPassword('qwerty'); // false\nisStrongPassword('qwerty1234'); // true\nisStrongPassword('zxcvbnmasdfghjkqwertyui'); // false\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"&& - означает «И» (в математической логике это называют конъюнкцией). Все выражение считается истинным только в том случае, когда истинен каждый операнд — каждое из составных выражений. Иными словами, && означает «и то, и другое»."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Приоритет этого оператора ниже, чем приоритет операторов сравнения, поэтому выражение отрабатывает правильно без скобок."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Кроме &&, часто используется оператор || — «ИЛИ» (дизъюнкция). Он означает «или то, или другое, или оба». Операторы можно комбинировать в любом количестве и любой последовательности, но когда одновременно встречаются && и ||, то приоритет лучше задавать скобками. Ниже пример расширенной функции определения корректности пароля:"}]},{"type":"element","tag":"h3","props":{"id":"и-конъюкция"},"children":[{"type":"text","value":"И && (Конъюкция)"}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"A"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"B"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"A && B"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"TRUE"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"TRUE"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"TRUE"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"TRUE"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"FALSE"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"FALSE"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"FALSE"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"TRUE"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"FALSE"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"FALSE"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"FALSE"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"FALSE"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Принцип все или ничего"}]},{"type":"element","tag":"pre","props":{"code":"// true && true;\n3 > 2 && 'wow'.startsWith('w'); // true\n\n// true && false;\n'start' === 'start' && 8 < 3; // false\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// true && true;\n3 > 2 && 'wow'.startsWith('w'); // true\n\n// true && false;\n'start' === 'start' && 8 < 3; // false\n"}]}]},{"type":"element","tag":"h3","props":{"id":"или-дизъюкция"},"children":[{"type":"text","value":"ИЛИ || (Дизъюкция)"}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"A"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"B"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"A && B"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"TRUE"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"TRUE"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"TRUE"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"TRUE"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"FALSE"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"TRUE"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"FALSE"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"TRUE"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"TRUE"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"FALSE"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"FALSE"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"FALSE"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Принцип если хотя бы кто-нибудь"}]},{"type":"element","tag":"pre","props":{"code":"// false || true;\n3 < 2 || 'wow'.startsWith('w'); // true\n\n// false || false;\n'start' === 'Start' || 3 < 3; // false\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// false || true;\n3 < 2 || 'wow'.startsWith('w'); // true\n\n// false || false;\n'start' === 'Start' || 3 < 3; // false\n"}]}]},{"type":"element","tag":"h3","props":{"id":"отрицание"},"children":[{"type":"text","value":"Отрицание"}]},{"type":"element","tag":"pre","props":{"code":"const isEven = (number) => number % 2 === 0;\n\nisEven(10);  // true  Четное ли\n!isEven(10); // false  Нечетное ли\n!isEven(11) // true  Нечетное ли\n!!isEven(10) // true // Четное ли + приведение типа к boolean\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const isEven = (number) => number % 2 === 0;\n\nisEven(10);  // true  Четное ли\n!isEven(10); // false  Нечетное ли\n!isEven(11) // true  Нечетное ли\n!!isEven(10) // true // Четное ли + приведение типа к boolean\n"}]}]},{"type":"element","tag":"h2","props":{"id":"условные-конструкции"},"children":[{"type":"text","value":"Условные конструкции"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"if"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"else"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Конструкция else if"}]}]},{"type":"element","tag":"pre","props":{"code":"const getTypeOfSentence = (sentence) => {\n  const lastChar = sentence[sentence.length - 1];\n  let sentenceType;\n\n  if (lastChar === '?') {\n    sentenceType = 'question';\n  } else if (lastChar === '!') {\n    sentenceType = 'exclamation';\n  } else {\n    sentenceType = 'normal';\n  }\n\n  return `Sentence is ${sentenceType}`;\n};\n\ngetTypeOfSentence('Who?'); // Sentence is question\ngetTypeOfSentence('No');   // Sentence is normal\ngetTypeOfSentence('No!');  // Sentence is exclamation\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const getTypeOfSentence = (sentence) => {\n  const lastChar = sentence[sentence.length - 1];\n  let sentenceType;\n\n  if (lastChar === '?') {\n    sentenceType = 'question';\n  } else if (lastChar === '!') {\n    sentenceType = 'exclamation';\n  } else {\n    sentenceType = 'normal';\n  }\n\n  return `Sentence is ${sentenceType}`;\n};\n\ngetTypeOfSentence('Who?'); // Sentence is question\ngetTypeOfSentence('No');   // Sentence is normal\ngetTypeOfSentence('No!');  // Sentence is exclamation\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Теперь все условия выстроены в единую конструкцию. else if — это «если не выполнено предыдущее условие, но выполнено текущее». Получается такая схема:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"если последний символ это ?, то 'question'\nиначе, если последний символ это !, то 'exclamation'\nиначе 'normal'"}]},{"type":"element","tag":"h2","props":{"id":"тернарный-оператор"},"children":[{"type":"text","value":"Тернарный оператор"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Тернарный оператор — единственный в своем роде оператор, требующий три операнда:"}]},{"type":"element","tag":"pre","props":{"code":"const abs = (number) => {\n  return number >= 0 ? number : -number;\n};\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const abs = (number) => {\n  return number >= 0 ? number : -number;\n};\n"}]}]},{"type":"element","tag":"h2","props":{"id":"результат-логических-операций"},"children":[{"type":"text","value":"Результат логических операций"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Посмотрите на код ниже и попробуйте угадать, что будет напечатано на экран:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"console.log(0 || 1);"}]},{"type":"text","value":"\nПравильный ответ: 1"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Оператор ИЛИ работает так, что его выполнение (слева направо) прерывается и возвращается результат первого аргумента, который можно преобразовать в true. Если первый аргумент невозможно преобразовать в true, то возвращается второй, даже если его нельзя преобразовать в true."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Ниже пример с оператором И:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"console.log(0 && 1); // => 0"}]},{"type":"text","value":"\nОператор И работает так, что его выполнение (слева направо) прерывается и возвращается результат первого аргумента, который можно преобразовать в false."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"В JavaScript есть два простых правила, по которым происходят преобразования:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"0, '' (пустая строка), undefined, NaN, null приводятся к false. Эти значения называют falsy.\nВсе остальное приводится к true\nЭтим активно пользуются в разработке, например, для определения значения по умолчанию:"}]},{"type":"element","tag":"pre","props":{"code":"const value = name || '';\n// Примеры\n234 || ''; // 234\n'hexlet' || ''; // hexlet\nundefined || ''; // ''\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const value = name || '';\n// Примеры\n234 || ''; // 234\n'hexlet' || ''; // hexlet\nundefined || ''; // ''\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"логика","depth":2,"text":"Логика"},{"id":"логический-тип","depth":2,"text":"Логический тип"},{"id":"комбинирование-логических-операций","depth":2,"text":"Комбинирование логических операций"},{"id":"логические-операторы","depth":2,"text":"Логические операторы","children":[{"id":"и-конъюкция","depth":3,"text":"И && (Конъюкция)"},{"id":"или-дизъюкция","depth":3,"text":"ИЛИ || (Дизъюкция)"},{"id":"отрицание","depth":3,"text":"Отрицание"}]},{"id":"условные-конструкции","depth":2,"text":"Условные конструкции"},{"id":"тернарный-оператор","depth":2,"text":"Тернарный оператор"},{"id":"результат-логических-операций","depth":2,"text":"Результат логических операций"}]}},"_type":"markdown","_id":"content:3.Основы:3.js.md","_source":"content","_file":"3.Основы/3.js.md","_extension":"md"}